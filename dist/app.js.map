{"version":3,"sources":["../src/radicchio.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,CAAC,qBAAqB,CAAC,CAAC;;AAQ/B,MAAM,CAAC,OAAO,GAAG,UAAU,QAAQ,EAAE;;;AAGnC,MAAM,QAAQ,GAAG,QAAQ,IAAI,wBAAwB,CAAC;AACtD,MAAM,KAAK,GAAG,sBAAU,QAAQ,CAAC,CAAC;AAClC,MAAM,GAAG,GAAG,sBAAU,QAAQ,CAAC,CAAC;AAChC,MAAM,OAAO,GAAG,4BAAa,EAAE,CAAC,CAAC;AACjC,MAAM,SAAS,GAAG,EAAE,CAAC;AACrB,MAAM,YAAY,GAAG,UAAU,CAAC;AAChC,MAAM,aAAa,GAAG,WAAW,CAAC;AAClC,MAAM,eAAe,GAAG,YAAY,CAAC;AACrC,MAAM,aAAa,GAAG,UAAU;;;;;;;AAAC,AAOjC,WAAS,WAAW,CAAC,QAAQ,EAAE;AAC7B,QAAM,YAAY,GAAG,SAAS,GAAG,cAAc,CAAC;AAChD,WAAO,aAAG,YAAY,CAAC,YAAY,GAAG,QAAQ,EAAE,MAAM,CAAC,CAAC;GACzD;;;;;AAAA,AAKD,WAAS,MAAM,GAAG;AAChB,aAAS,CAAC,eAAe,EAAE,CAAC;AAC5B,aAAS,CAAC,oBAAoB,EAAE,CAAC;GAClC;;;;;;;;AAAA,AAQD,WAAS,CAAC,EAAE,GAAG,UAAU,KAAK,EAAE,QAAQ,EAAE;AACxC,WAAO,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;GAC7B;;;;;;AAAC,AAMF,WAAS,CAAC,IAAI,GAAG,YAAY;AAC3B,QAAM,aAAa,GAAG,oBAAoB,CAAC;AAC3C,QAAM,aAAa,GAAG,wBAAwB,CAAC;AAC/C,QAAM,YAAY,GAAG,uBAAuB,CAAC;;AAE7C,aAAS,CAAC,WAAW,GAAG,kBAAQ,QAAQ,EAAE,CAAC;;AAE3C,aAAS,CAAC,UAAU,GAAG,SAAS,CAAC,WAAW,GAAG,YAAY,CAAC;AAC5D,aAAS,CAAC,SAAS,GAAG,SAAS,CAAC,WAAW,GAAG,aAAa,CAAC;;AAE5D,WAAO,uBAAY,UAAU,OAAO,EAAE;;AAEpC,UAAM,SAAS,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC;AAC3C,UAAM,UAAU,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;AAC7C,UAAM,cAAc,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC;AACrD,UAAM,eAAe,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC;AACvD,UAAM,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC,CAAC;AAC/C,UAAM,UAAU,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;AAC7C,UAAM,WAAW,GAAG,WAAW,CAAC,kBAAkB,CAAC,CAAC;AACpD,UAAM,kBAAkB,GAAG,WAAW,CAAC,oBAAoB,CAAC;;;AAAC,AAG7D,WAAK,CAAC,MAAM,CAAC,KAAK,EAAE,wBAAwB,EAAE,KAAK,CAAC;;;AAAC,AAGrD,WAAK,CAAC,aAAa,CAAC,YAAY,EAAE;AAChC,oBAAY,EAAE,CAAC;AACf,WAAG,EAAE,SAAS;OACf,CAAC,CAAC;;AAEH,WAAK,CAAC,aAAa,CAAC,aAAa,EAAE;AACjC,oBAAY,EAAE,CAAC;AACf,WAAG,EAAE,UAAU;OAChB,CAAC,CAAC;;AAEH,WAAK,CAAC,aAAa,CAAC,YAAY,EAAE;AAChC,oBAAY,EAAE,CAAC;AACf,WAAG,EAAE,cAAc;OACpB,CAAC,CAAC;;AAEH,WAAK,CAAC,aAAa,CAAC,aAAa,EAAE;AACjC,oBAAY,EAAE,CAAC;AACf,WAAG,EAAE,eAAe;OACrB,CAAC,CAAC;;AAEH,WAAK,CAAC,aAAa,CAAC,cAAc,EAAE;AAClC,oBAAY,EAAE,CAAC;AACf,WAAG,EAAE,WAAW;OACjB,CAAC,CAAC;;AAEH,WAAK,CAAC,aAAa,CAAC,aAAa,EAAE;AACjC,oBAAY,EAAE,CAAC;AACf,WAAG,EAAE,UAAU;OAChB,CAAC,CAAC;;AAEH,WAAK,CAAC,aAAa,CAAC,cAAc,EAAE;AAClC,oBAAY,EAAE,CAAC;AACf,WAAG,EAAE,WAAW;OACjB,CAAC,CAAC;;AAEH,WAAK,CAAC,aAAa,CAAC,gBAAgB,EAAE;AACpC,oBAAY,EAAE,CAAC;AACf,WAAG,EAAE,kBAAkB;OACxB,CAAC;;;AAAC,AAGH,SAAG,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC5C,YAAI,OAAO,KAAK,aAAa,EAAE;AAC7B,cAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AACzC,mBAAO,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;WACpC,MACI,IAAI,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;AAC5C,qBAAS,CAAC,SAAS,GAAG,IAAI,CAAC;WAC5B,MACI,IAAI,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;AAC3C,qBAAS,CAAC,UAAU,GAAG,IAAI,CAAC;WAC7B,MACI,IAAI,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;AAC7C,mBAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;WAClC;;AAED,cAAI,SAAS,CAAC,UAAU,KAAK,IAAI,IAAI,SAAS,CAAC,SAAS,KAAK,IAAI,EAAE;AACjE,qBAAS,CAAC,WAAW,GAAG,kBAAQ,QAAQ,EAAE,CAAC;AAC3C,qBAAS,CAAC,UAAU,GAAG,SAAS,CAAC,WAAW,GAAG,YAAY,CAAC;AAC5D,qBAAS,CAAC,SAAS,GAAG,SAAS,CAAC,WAAW,GAAG,aAAa,CAAC;WAC7D;SACF,MACI,IAAI,OAAO,KAAK,aAAa,IAAI,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;AAC1E,eAAK,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;;AAEzF,mBAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAC9B,IAAI,CAAC,UAAC,QAAQ,EAAK;AAClB,mBAAO,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;WACnC,CAAC,CAAC;SACJ,MACI,IAAI,OAAO,KAAK,YAAY,IAAI,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;AACxE,iBAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SAClC;OACF,CAAC;;;AAAC,AAGH,SAAG,CAAC,SAAS,CAAC,aAAa,EAAE,aAAa,EAAE,YAAY,CAAC;;;AAAC,AAG1D,iBAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;;AAE1B,aAAO,CAAC,IAAI,CAAC,CAAC;KACf,CAAC,CAAC;GACJ;;;;;;;;;AAAC,AASF,WAAS,CAAC,UAAU,GAAG,UAAU,QAAQ,EAAE,IAAI,EAAE;AAC/C,QAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;;AAE3B,WAAO,uBAAY,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5C,UAAI;;AACF,cAAM,OAAO,GAAG,kBAAQ,QAAQ,EAAE,CAAC;AACnC,cAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;;AAEhD,eAAK,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE,SAAS,CAAC,SAAS,EAAE,QAAQ,EAAE,eAAe,EAAE,EAAE,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AACzH,gBAAI,GAAG,EAAE;AACP,oBAAM,CAAC,GAAG,CAAC,CAAC;aACb,MACI,IAAI,MAAM,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;AACtC,qBAAO,CAAC,OAAO,CAAC,CAAC;aAClB;WACF,CAAC,CAAC;;OACJ,CACD,OAAO,CAAC,EAAE;AACR,cAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC,CAAC;GACJ;;;;;;;AAAC,AAOF,WAAS,CAAC,YAAY,GAAG,UAAU,OAAO,EAAE;AAC1C,WAAO,uBAAY,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5C,UAAI;AACF,aAAK,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,eAAe,EAAE,EAAE,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AACtG,cAAI,GAAG,EAAE;AACP,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb,MACI,IAAI,MAAM,KAAK,CAAC,EAAE;AACrB,mBAAO,CAAC,IAAI,CAAC,CAAC;WACf;SACF,CAAC,CAAC;OACJ,CACD,OAAO,CAAC,EAAE;AACR,cAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC,CAAC;GACJ;;;;;;;AAAC,AAOF,WAAS,CAAC,WAAW,GAAG,UAAU,OAAO,EAAE;AACzC,WAAO,uBAAY,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5C,UAAI;AACF,aAAK,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,aAAa,EAAE,EAAE,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AACnG,cAAI,GAAG,EAAE;AACP,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb,MACI,IAAI,MAAM,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;AACtC,mBAAO,CAAC,IAAI,CAAC,CAAC;WACf;SACF,CAAC,CAAC;OACJ,CACD,OAAO,CAAC,EAAE;AACR,cAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC,CAAC;GACJ;;;;;;;AAAC,AAOF,WAAS,CAAC,WAAW,GAAG,UAAU,OAAO,EAAE;AACzC,WAAO,uBAAY,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5C,UAAI;AACF,aAAK,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AAC/F,cAAI,GAAG,EAAE;AACP,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb,MACI,IAAI,MAAM,KAAK,KAAK,EAAE;AACzB,gBAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAChC,mBAAO,CAAC,IAAI,CAAC,CAAC;WACf,MACI;AACH,kBAAM,CAAC,IAAI,CAAC,CAAC;WACd;SACF,CAAC,CAAC;OACJ,CACD,OAAO,CAAC,EAAE;AACR,cAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC,CAAC;GACJ;;;;;;;AAAC,AAOF,WAAS,CAAC,WAAW,GAAG,UAAU,OAAO,EAAE;AACzC,WAAO,uBAAY,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5C,UAAI;AACF,aAAK,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE,EAAE,UAAU,GAAG,EAAE,QAAQ,EAAE;AACtD,cAAI,GAAG,EAAE;AACP,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb,MACI,IAAI,QAAQ,IAAI,CAAC,EAAE;AACtB,gBAAM,QAAQ,GAAG;AACf,qBAAO,EAAP,OAAO;AACP,sBAAQ,EAAR,QAAQ;aACT,CAAC;AACF,mBAAO,CAAC,QAAQ,CAAC,CAAC;WACnB,MACI,IAAI,QAAQ,GAAG,CAAC,EAAE;AACrB,mBAAO,CAAC,IAAI,CAAC,CAAC;WACf;SACF,CAAC,CAAC;OACJ,CACD,OAAO,CAAC,EAAE;AACR,cAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC,CAAC;GACJ;;;;;;;AAAC,AAOF,WAAS,CAAC,eAAe,GAAG,YAAY;AACtC,QAAM,QAAQ,GAAG,EAAE,CAAC;;AAEpB,WAAO,uBAAY,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5C,UAAI;AACF,aAAK,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AAChE,cAAI,GAAG,EAAE;AACP,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb,MACI;AACH,6BAAE,GAAG,CAAC,MAAM,EAAE,UAAU,OAAO,EAAE;AAC/B,sBAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;aAC/C,CAAC,CAAC;;AAEH,+BAAQ,GAAG,CAAC,QAAQ,CAAC,CACpB,IAAI,CAAC,UAAC,SAAS,EAAK;AACnB,kBAAM,QAAQ,GAAG,iBAAE,MAAM,CAAC,SAAS,EAAE,UAAU,QAAQ,EAAE;AACvD,uBAAO,QAAQ,KAAK,IAAI,IAAI,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC;eACnD,CAAC,CAAC;;AAEH,qBAAO,CAAC,QAAQ,CAAC,CAAC;aACnB,CAAC,CAAC;WACJ;SACF,CAAC,CAAC;OACJ,CACD,OAAO,CAAC,EAAE;AACR,cAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC,CAAC;GACJ;;;;;;;AAAC,AAOF,WAAS,CAAC,YAAY,GAAG,UAAU,OAAO,EAAE;AAC1C,WAAO,uBAAY,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5C,UAAI;AACF,aAAK,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AACtE,cAAI,GAAG,EAAE;AACP,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb,MACI;AACH,gBAAI,MAAM,KAAK,KAAK,EAAE;AACpB,oBAAM,CAAC,IAAI,CAAC,CAAC;aACd,MACI;AACH,kBAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAChC,kBAAM,QAAQ,GAAG;AACf,uBAAO,EAAP,OAAO;AACP,oBAAI,EAAJ,IAAI;eACL,CAAC;;AAEF,qBAAO,CAAC,QAAQ,CAAC,CAAC;aACnB;WACF;SACF,CAAC,CAAC;OACJ,CACD,OAAO,CAAC,EAAE;AACR,cAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC,CAAC;GACJ;;;;;;AAAC,AAMF,WAAS,CAAC,oBAAoB,GAAG,YAAY;AAC3C,QAAM,QAAQ,GAAG,EAAE,CAAC;;AAEpB,WAAO,uBAAY,UAAU,OAAO,EAAE,MAAM,EAAE;AAC5C,UAAI;AACF,aAAK,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AAC/D,cAAI,GAAG,EAAE;AACP,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb,MACI;AACH,6BAAE,GAAG,CAAC,MAAM,EAAE,UAAU,OAAO,EAAE;AAC/B,sBAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;aAChD,CAAC,CAAC;;AAEH,+BAAQ,GAAG,CAAC,QAAQ,CAAC,CACpB,IAAI,CAAC,UAAC,aAAa,EAAK;AACvB,qBAAO,CAAC,aAAa,CAAC,CAAC;aACxB,CAAC,CAAC;WACJ;SACF,CAAC,CAAC;OACJ,CACD,OAAO,CAAC,EAAE;AACR,cAAM,CAAC,CAAC,CAAC,CAAC;OACX;KACF,CAAC,CAAC;GACJ,CAAC;;AAEF,SAAO,SAAS,CAAC;CAClB,CAAC","file":"app.js","sourcesContent":["// Radicchio imports\nrequire('babel-core/register');\nimport Redis from 'ioredis';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport ShortId from 'shortid';\nimport eventEmitter from 'event-emitter';\nimport _ from 'lodash';\n\nmodule.exports = function (redisUrl) {\n  // Radicchio constants\n\n  const redisURL = redisUrl || 'redis://localhost:6379';\n  const redis = new Redis(redisURL);\n  const sub = new Redis(redisURL);\n  const emitter = eventEmitter({});\n  const radicchio = {};\n  const setTTLSuffix = '-ttl-set';\n  const setDataSuffix = '-data-set';\n  const suspendedSuffix = '-suspended';\n  const resumedSuffix = '-resumed';\n\n  /**\n  * Loads a lua file\n  * @param {String} fileName - the lua file name to load from the lua folder\n  * @returns {String} - the loaded file contents\n  */\n  function loadLuaFile(fileName) {\n    const luaDirectory = __dirname + '/../src/lua/';\n    return fs.readFileSync(luaDirectory + fileName, 'utf8');\n  }\n\n  /**\n  * Update loop that runs once a second and targets redis keys to ensure expiration\n  */\n  function update() {\n    radicchio.getAllTimesLeft();\n    radicchio.getDataFromAllTimers();\n  }\n\n  /**\n  * Sets up event-emitter events to react to Redis Pub/Sub\n  * Current supported internal events: deleted, expired, suspended, and resumed\n  * @param {String} event - the supported event name to listen for\n  * @param {Function} - the callback function passed to event-emitter\n  */\n  radicchio.on = function (event, callback) {\n    emitter.on(event, callback);\n  };\n\n  /**\n  * Setup initial synchronous settings, events, commands, and files for Radicchio\n  * @returns {Promise<Boolean>} - Resolves to true when initialized\n  */\n  radicchio.init = function () {\n    const EVENT_DELETED = '__keyevent@0__:del';\n    const EVENT_EXPIRED = '__keyevent@0__:expired';\n    const EVENT_EXPIRE = '__keyevent@0__:expire';\n\n    radicchio.globalSetId = ShortId.generate();\n\n    radicchio.timerSetId = radicchio.globalSetId + setTTLSuffix;\n    radicchio.dataSetId = radicchio.globalSetId + setDataSuffix;\n\n    return new Promise(function (resolve) {\n      // Load lua files\n      const startFile = loadLuaFile('start.lua');\n      const deleteFile = loadLuaFile('delete.lua');\n      const getSetKeysFile = loadLuaFile('getSetKeys.lua');\n      const getTimeLeftFile = loadLuaFile('getTimeLeft.lua');\n      const suspendFile = loadLuaFile('suspend.lua');\n      const resumeFile = loadLuaFile('resume.lua');\n      const getDataFile = loadLuaFile('getTimerData.lua');\n      const deleteFromSetsFile = loadLuaFile('deleteFromSets.lua');\n\n      // Redis Pub/Sub config settings\n      redis.config('SET', 'notify-keyspace-events', 'KEA');\n\n      // Redis custom defined commands\n      redis.defineCommand('startTimer', {\n        numberOfKeys: 3,\n        lua: startFile,\n      });\n\n      redis.defineCommand('deleteTimer', {\n        numberOfKeys: 2,\n        lua: deleteFile,\n      });\n\n      redis.defineCommand('getSetKeys', {\n        numberOfKeys: 1,\n        lua: getSetKeysFile,\n      });\n\n      redis.defineCommand('getTimeLeft', {\n        numberOfKeys: 1,\n        lua: getTimeLeftFile,\n      });\n\n      redis.defineCommand('suspendTimer', {\n        numberOfKeys: 2,\n        lua: suspendFile,\n      });\n\n      redis.defineCommand('resumeTimer', {\n        numberOfKeys: 2,\n        lua: resumeFile,\n      });\n\n      redis.defineCommand('getTimerData', {\n        numberOfKeys: 1,\n        lua: getDataFile,\n      });\n\n      redis.defineCommand('deleteFromSets', {\n        numberOfKeys: 2,\n        lua: deleteFromSetsFile,\n      });\n\n      // Event handler for Redis Pub/Sub events with the subscribing Redis client\n      sub.on('message', function (channel, message) {\n        if (channel === EVENT_DELETED) {\n          if (message.indexOf(suspendedSuffix) >= 0) {\n            emitter.emit('suspended', message);\n          }\n          else if (message.indexOf(setDataSuffix) >= 0) {\n            radicchio.dataSetId = null;\n          }\n          else if (message.indexOf(setTTLSuffix) >= 0) {\n            radicchio.timerSetId = null;\n          }\n          else if (message.indexOf(setTTLSuffix) === -1) {\n            emitter.emit('deleted', message);\n          }\n\n          if (radicchio.timerSetId === null && radicchio.dataSetId === null) {\n            radicchio.globalSetId = ShortId.generate();\n            radicchio.timerSetId = radicchio.globalSetId + setTTLSuffix;\n            radicchio.dataSetId = radicchio.globalSetId + setDataSuffix;\n          }\n        }\n        else if (channel === EVENT_EXPIRED && message.indexOf(setTTLSuffix) === -1) {\n          redis.deleteFromSets(radicchio.timerSetId, radicchio.dataSetId, message, function () {});\n\n          radicchio.getTimerData(message)\n          .then((timerObj) => {\n            emitter.emit('expired', timerObj);\n          });\n        }\n        else if (channel === EVENT_EXPIRE && message.indexOf(resumedSuffix) >= 0) {\n          emitter.emit('resumed', message);\n        }\n      });\n\n      // Subscribe to the Redis Pub/Sub events with the subscribing Redis client\n      sub.subscribe(EVENT_DELETED, EVENT_EXPIRED, EVENT_EXPIRE);\n\n      // Setup the update function\n      setInterval(update, 1000);\n\n      resolve(true);\n    });\n  };\n\n  /**\n  * Generates an id for a set and a timer using shortid\n  * Tracks the timer key in a Redis set and starts an expire on the timer key\n  * @param {String} timeInMS - The timer length in milliseconds\n  * @param {Object} data - data object to be associated with the timer\n  * @returns {Promise<String|Error>} - Resolves to the started timer id\n  */\n  radicchio.startTimer = function (timeInMS, data) {\n    const dataObj = data || {};\n\n    return new Promise(function (resolve, reject) {\n      try {\n        const timerId = ShortId.generate();\n        const dataStringified = JSON.stringify(dataObj);\n\n        redis.startTimer(radicchio.timerSetId, timerId, radicchio.dataSetId, timeInMS, dataStringified, '', function (err, result) {\n          if (err) {\n            reject(err);\n          }\n          else if (result.toLowerCase() === 'ok') {\n            resolve(timerId);\n          }\n        });\n      }\n      catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\n  * Suspends a timer by updating the TTL in the global Redis set and deleting the timer\n  * @param {String} timerId - The timer id to be suspended\n  * @returns {Promise<Boolean|Error>} - Resolves to true if suspended successfully\n  */\n  radicchio.suspendTimer = function (timerId) {\n    return new Promise(function (resolve, reject) {\n      try {\n        redis.suspendTimer(radicchio.timerSetId, timerId, timerId + suspendedSuffix, '', function (err, result) {\n          if (err) {\n            reject(err);\n          }\n          else if (result === 1) {\n            resolve(true);\n          }\n        });\n      }\n      catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\n  * Starts a new timer with the remaining TTL in milliseconds pulled from the global Redis set\n  * @param {String} timerId - The timer id to be resumed\n  * @returns {Promise<Boolean|Error>} - Resolves to true if resumed successfully\n  */\n  radicchio.resumeTimer = function (timerId) {\n    return new Promise(function (resolve, reject) {\n      try {\n        redis.resumeTimer(radicchio.timerSetId, timerId, timerId + resumedSuffix, '', function (err, result) {\n          if (err) {\n            reject(err);\n          }\n          else if (result.toLowerCase() === 'ok') {\n            resolve(true);\n          }\n        });\n      }\n      catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\n  * Deletes a timer from Redis and the global Redis set\n  * @param {String} timerId - The timer id to be deleted\n  * @returns {Promise<Object|Error>} - Resolves to an object containing associated timer data\n  */\n  radicchio.deleteTimer = function (timerId) {\n    return new Promise(function (resolve, reject) {\n      try {\n        redis.deleteTimer(radicchio.timerSetId, radicchio.dataSetId, timerId, '', function (err, result) {\n          if (err) {\n            reject(err);\n          }\n          else if (result !== 'nil') {\n            const data = JSON.parse(result);\n            resolve(data);\n          }\n          else {\n            reject(null);\n          }\n        });\n      }\n      catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\n  * Gets the TTL (time to live) in milliseconds on a timer in Redis\n  * @param {String} timerId - The timer id get the time left on\n  * @returns {Promise<Object(String, Number)|Error>} - Resolves to an object with the timer id and time left\n  */\n  radicchio.getTimeLeft = function (timerId) {\n    return new Promise(function (resolve, reject) {\n      try {\n        redis.getTimeLeft(timerId, '', function (err, timeLeft) {\n          if (err) {\n            reject(err);\n          }\n          else if (timeLeft >= 0) {\n            const timerObj = {\n              timerId,\n              timeLeft,\n            };\n            resolve(timerObj);\n          }\n          else if (timeLeft < 0) {\n            resolve(null);\n          }\n        });\n      }\n      catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\n  * Gets the TTL (time to live) in milliseconds on all timers in the global Redis set\n  * Filters out any timers that have no time left or have expired\n  * @returns {Promise<Array(Object(String, Number))}>|Error>} - Resolves to an array of objects with a timer id and time left\n  */\n  radicchio.getAllTimesLeft = function () {\n    const promises = [];\n\n    return new Promise(function (resolve, reject) {\n      try {\n        redis.getSetKeys(radicchio.timerSetId, '', function (err, result) {\n          if (err) {\n            reject(err);\n          }\n          else {\n            _.map(result, function (timerId) {\n              promises.push(radicchio.getTimeLeft(timerId));\n            });\n\n            Promise.all(promises)\n            .then((timerObjs) => {\n              const filtered = _.filter(timerObjs, function (timerObj) {\n                return timerObj !== null && timerObj.timeLeft > 0;\n              });\n\n              resolve(filtered);\n            });\n          }\n        });\n      }\n      catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\n  * Gets the data associated with a timer\n  * @param {String} timerId - The timer id to get the associated data for\n  * @returns {Promise<Object(String, Object)|Error>} - Resolves to an object with the timer id and associated timer data\n  */\n  radicchio.getTimerData = function (timerId) {\n    return new Promise(function (resolve, reject) {\n      try {\n        redis.getTimerData(radicchio.dataSetId, timerId, function (err, result) {\n          if (err) {\n            reject(err);\n          }\n          else {\n            if (result === 'nil') {\n              reject(null);\n            }\n            else {\n              const data = JSON.parse(result);\n              const timerObj = {\n                timerId,\n                data,\n              };\n\n              resolve(timerObj);\n            }\n          }\n        });\n      }\n      catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  /**\n  * Get the data from all active timers (including suspended timers)\n  * @returns {Promise<Array<Object(String, Object)>|Error>} - Resolves to an array of objects with a timer id and data object\n  */\n  radicchio.getDataFromAllTimers = function () {\n    const promises = [];\n\n    return new Promise(function (resolve, reject) {\n      try {\n        redis.getSetKeys(radicchio.dataSetId, '', function (err, result) {\n          if (err) {\n            reject(err);\n          }\n          else {\n            _.map(result, function (timerId) {\n              promises.push(radicchio.getTimerData(timerId));\n            });\n\n            Promise.all(promises)\n            .then((timerDataObjs) => {\n              resolve(timerDataObjs);\n            });\n          }\n        });\n      }\n      catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  return radicchio;\n};\n"]}