{"version":3,"sources":["../src/radicchio.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["// Radicchio imports\nrequire('babel-core/register');\nimport Redis from 'ioredis';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport ShortId from 'shortid';\nimport eventEmitter from 'event-emitter';\nimport _ from 'lodash';\n\n// Radicchio constants\nconst redis = new Redis();\nconst sub = new Redis();\nconst emitter = eventEmitter({});\nconst radicchio = {};\nconst setSuffix = '-set';\nconst suspendedSuffix = '-suspended';\nconst resumedSuffix = '-resumed';\n\n/**\n* Loads a lua file\n* @param {String} fileName - the lua file name to load from the lua folder\n* @returns {String} - the loaded file contents\n*/\nfunction loadLuaFile(fileName) {\n  const luaDirectory = __dirname + '/../src/lua/';\n  return fs.readFileSync(luaDirectory + fileName, 'utf8');\n}\n\n/**\n* Update loop that runs once a second and targets redis keys to ensure expiration\n*/\nfunction update() {\n  radicchio.getAllTimesLeft();\n}\n\n/**\n* Sets up event-emitter events to react to Redis Pub/Sub\n* Current supported internal events: deleted, expired, suspended, and resumed\n* @param {String} event - the supported event name to listen for\n* @param {Function} - the callback function passed to event-emitter\n*/\nradicchio.on = function (event, callback) {\n  emitter.on(event, callback);\n};\n\n/**\n* Setup initial synchronous settings, events, commands, and files for Radicchio\n* @returns {Promise<Boolean>} - Resolves to true when initialized\n*/\nradicchio.init = function () {\n  const EVENT_DELETED = '__keyevent@0__:del';\n  const EVENT_EXPIRED = '__keyevent@0__:expired';\n  const EVENT_EXPIRE = '__keyevent@0__:expire';\n\n  radicchio.setId = ShortId.generate() + setSuffix;\n\n  return new Promise(function (resolve) {\n    // Load lua files\n    const startFile = loadLuaFile('start.lua');\n    const deleteFile = loadLuaFile('delete.lua');\n    const getSetKeysFile = loadLuaFile('getSetKeys.lua');\n    const getTimeLeftFile = loadLuaFile('getTimeLeft.lua');\n    const suspendFile = loadLuaFile('suspend.lua');\n    const resumeFile = loadLuaFile('resume.lua');\n\n    // Redis Pub/Sub config settings\n    redis.config('SET', 'notify-keyspace-events', 'KEA');\n\n    // Redis custom defined commands\n    redis.defineCommand('startTimer', {\n      numberOfKeys: 2,\n      lua: startFile,\n    });\n\n    redis.defineCommand('deleteTimer', {\n      numberOfKeys: 1,\n      lua: deleteFile,\n    });\n\n    redis.defineCommand('getSetKeys', {\n      numberOfKeys: 1,\n      lua: getSetKeysFile,\n    });\n\n    redis.defineCommand('getTimeLeft', {\n      numberOfKeys: 1,\n      lua: getTimeLeftFile,\n    });\n\n    redis.defineCommand('suspendTimer', {\n      numberOfKeys: 2,\n      lua: suspendFile,\n    });\n\n    redis.defineCommand('resumeTimer', {\n      numberOfKeys: 2,\n      lua: resumeFile,\n    });\n\n    // Event handler for Redis Pub/Sub events with the subscribing Redis client\n    sub.on('message', function (channel, message) {\n      if (channel === EVENT_DELETED) {\n        if (message.indexOf(suspendedSuffix) >= 0) {\n          emitter.emit('suspended', message);\n        }\n        else {\n          emitter.emit('deleted', message);\n        }\n      }\n      else if (channel === EVENT_EXPIRED && message.indexOf(setSuffix) === -1) {\n        emitter.emit('expired', message);\n      }\n      else if (channel === EVENT_EXPIRE && message.indexOf(resumedSuffix) >= 0) {\n        emitter.emit('resumed', message);\n      }\n    });\n\n    // Subscribe to the Redis Pub/Sub events with the subscribing Redis client\n    sub.subscribe(EVENT_DELETED, EVENT_EXPIRED, EVENT_EXPIRE);\n\n    // Setup the update function\n    setInterval(update, 1000);\n\n    resolve(true);\n  });\n};\n\n/**\n* Generates an id for a set and a timer using shortid\n* Tracks the timer key in a Redis set and starts an expire on the timer key\n* @param {String} timeInMS - The timer length in milliseconds\n* @returns {Promise<String|Error>} - Resolves to the started timer id\n*/\nradicchio.startTimer = function (timeInMS) {\n  return new Promise(function (resolve, reject) {\n    try {\n      if (radicchio.setId === null) {\n        radicchio.setId = ShortId.generate() + setSuffix;\n      }\n\n      const timerId = ShortId.generate();\n\n      redis.startTimer(radicchio.setId, timerId, timeInMS, '', function (err, result) {\n        if (err) {\n          reject(err);\n        }\n        else if (result.toLowerCase() === 'ok') {\n          resolve(timerId);\n        }\n      });\n    }\n    catch (e) {\n      reject(e);\n    }\n  });\n};\n\n/**\n* Suspends a timer by updating the TTL in the global Redis set and deleting the timer\n* @param {String} timerId - The timer id to be suspended\n* @returns {Promise<Boolean|Error>} - Resolves to true if suspended successfully\n*/\nradicchio.suspendTimer = function (timerId) {\n  return new Promise(function (resolve, reject) {\n    try {\n      redis.suspendTimer(radicchio.setId, timerId, timerId + suspendedSuffix, function (err, result) {\n        if (err) {\n          reject(err);\n        }\n        else if (result === 1) {\n          resolve(true);\n        }\n      });\n    }\n    catch (e) {\n      reject(e);\n    }\n  });\n};\n\n/**\n* Starts a new timer with the remaining TTL pulled from the global Redis set\n* @param {String} timerId - The timer id to be resumed\n* @returns {Promise<Boolean|Error>} - Resolves to true if resumed successfully\n*/\nradicchio.resumeTimer = function (timerId) {\n  return new Promise(function (resolve, reject) {\n    try {\n      redis.resumeTimer(radicchio.setId, timerId, timerId + resumedSuffix, '', function (err, result) {\n        if (err) {\n          reject(err);\n        }\n        else if (result.toLowerCase() === 'ok') {\n          resolve(true);\n        }\n      });\n    }\n    catch (e) {\n      reject(e);\n    }\n  });\n};\n\n/**\n* Deletes a timer from Redis and the global Redis set\n* @param {String} timerId - The timer id to be deleted\n* @returns {Promise<Boolean|Error>} - Resolves to true if deleted successfully\n*/\nradicchio.deleteTimer = function (timerId) {\n  return new Promise(function (resolve, reject) {\n    try {\n      redis.deleteTimer(radicchio.setId, timerId, function (err, result) {\n        if (err) {\n          reject(err);\n        }\n        else if (result === 1) {\n          resolve(true);\n        }\n      });\n    }\n    catch (e) {\n      reject(e);\n    }\n  });\n};\n\n/**\n* Gets the TTL (time to live) on a timer in Redis\n* @param {String} timerId - The timer id get the time left on\n* @returns {Promise<{String, Number}|Error>} - Resolves to an object with the timer id and left in milliseconds\n*/\nradicchio.getTimeLeft = function (timerId) {\n  return new Promise(function (resolve, reject) {\n    try {\n      redis.getTimeLeft(timerId, '', function (err, timeLeft) {\n        if (err) {\n          reject(err);\n        }\n        else if (timeLeft >= 0) {\n          const timerObj = {\n            timerId,\n            timeLeft,\n          };\n          resolve(timerObj);\n        }\n        else if (timeLeft < 0) {\n          resolve(null);\n        }\n      });\n    }\n    catch (e) {\n      reject(e);\n    }\n  });\n};\n\n/**\n* Gets the TTL (time to live) on all timers in the global Redis set\n* Filters out any timers that have no time left or have expired\n* @returns {Promise<Array<{String, Number}>|Error>} - Resolves to an array of objects with a timer id and time left in milliseconds\n*/\nradicchio.getAllTimesLeft = function () {\n  const promises = [];\n\n  return new Promise(function (resolve, reject) {\n    try {\n      redis.getSetKeys(radicchio.setId, '', function (err, result) {\n        _.map(result, function (timerId) {\n          promises.push(radicchio.getTimeLeft(timerId));\n        });\n\n        Promise.all(promises)\n        .then((timerObjs) => {\n          const filtered = _.filter(timerObjs, function (timerObj) {\n            return timerObj !== null && timerObj.timeLeft > 0;\n          });\n\n          if (filtered.length === 0) {\n            radicchio.setId = null;\n          }\n          resolve(filtered);\n        });\n      });\n    }\n    catch (e) {\n      reject(e);\n    }\n  });\n};\n\nmodule.exports = radicchio;\n"]}